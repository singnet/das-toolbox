from time import sleep

from injector import inject

from commands.attention_broker.attention_broker_container_manager import AttentionBrokerManager
from commands.context_broker.context_broker_container_manager import ContextBrokerContainerManager
from commands.db.mongodb_container_manager import MongodbContainerManager
from commands.db.redis_container_manager import RedisContainerManager
from commands.evolution_agent.evolution_agent_container_manager import (
    EvolutionAgentContainerManager,
)
from commands.inference_agent.inference_agent_container_manager import (
    InferenceAgentContainerManager,
)
from commands.link_creation_agent.link_creation_agent_container_manager import (
    LinkCreationAgentContainerManager,
)
from commands.query_agent.query_agent_container_manager import QueryAgentContainerManager
from common import Command, CommandGroup, Settings, StdoutSeverity
from common.decorators import ensure_container_running
from settings.config import LOG_FILE_NAME


class LogsDas(Command):
    name = "das"

    short_help = "Display logs for das."

    help = """
NAME

    logs das - Display logs for the DAS service

SYNOPSIS

    das-cli logs das

DESCRIPTION

    Displays the logs of the DAS service.
    This command reads logs from the log file used by the DAS core process, typically located at `/tmp/das.log`.
    Logs will stream in real-time until the user exits with Ctrl+C.

EXAMPLES

    Display logs of the DAS service:

        das-cli logs das
"""

    def __init__(self) -> None:
        super().__init__()

    def run(self):
        try:
            with open(LOG_FILE_NAME, "r") as file:
                while True:
                    line = file.readline()
                    if not line:
                        sleep(0.1)
                        continue
                    self.stdout(line, new_line=False)
        except KeyboardInterrupt:
            self.stdout("Interrupted. Exiting...", severity=StdoutSeverity.ERROR)
        except FileNotFoundError:
            self.stdout("No logs to show up here", severity=StdoutSeverity.WARNING)


class LogsMongoDb(Command):
    name = "mongodb"

    short_help = "Display logs of the MongoDB service."

    help = """
NAME

    logs mongodb - Display logs for the MongoDB service

SYNOPSIS

    das-cli logs mongodb

DESCRIPTION

    Displays logs generated by the MongoDB container.
    This includes database events such as connections, queries, and internal errors.
    The MongoDB container must be running for logs to be available.

EXAMPLES

    Display logs of the MongoDB service:

        das-cli logs mongodb
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        mongodb_container_manager: MongodbContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._mongodb_container_manager = mongodb_container_manager

    @ensure_container_running(
        ["_mongodb_container_manager"],
        exception_text="MongoDB is not running. Please start it with 'das-cli db start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._mongodb_container_manager.logs()


class LogsRedis(Command):
    name = "redis"

    short_help = "Display logs for Redis."

    help = """
NAME

    logs redis - Display logs for the Redis service

SYNOPSIS

    das-cli logs redis

DESCRIPTION

    Displays logs generated by the Redis container.
    These logs include cache operations, connections, key access patterns, and error messages.
    The Redis container must be running for logs to be available.

EXAMPLES

    Display logs of the Redis service:

        das-cli logs redis
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        redis_container_manager: RedisContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._redis_container_manager = redis_container_manager

    @ensure_container_running(
        ["_redis_container_manager"],
        exception_text="Redis is not running. Please start it with 'das-cli db start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._redis_container_manager.logs()


class LogsAttentionBroker(Command):
    name = "attention-broker"

    aliases = ["ab"]

    short_help = "Display logs for the Attention Broker service"

    help = """
'das-cli logs attention-broker' displays the logs of the Attention Broker service.
This command retrieves the logs generated by the Attention Broker, which may include information about message routing, broker events, and errors.

.SH EXAMPLES

Display logs of the Attention Broker service.

$ das-cli logs attention-broker
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        attention_broker_manager: AttentionBrokerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._attention_broker_manager = attention_broker_manager

    @ensure_container_running(
        ["_attention_broker_manager"],
        exception_text="Attention broker is not running. Please start it with 'das-cli attention-broker start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._attention_broker_manager.logs()


class LogsQueryAgent(Command):
    name = "query-agent"

    aliases = ["qa", "query"]

    short_help = "Display logs for the Query Agent service"

    help = """
'das-cli logs query-agent' displays the logs of the Query Agent service.
This command retrieves the logs generated by the Query Agent, which may include information about query processing, agent events, and errors.

.SH EXAMPLES

Display logs of the Query Agent service.

$ das-cli logs query-agent
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        query_agent_container_manager: QueryAgentContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._query_agent_container_manager = query_agent_container_manager

    @ensure_container_running(
        ["_query_agent_container_manager"],
        exception_text="Query agent is not running. Please start it with 'das-cli query-agent start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._query_agent_container_manager.logs()


class LogsLinkCreationAgent(Command):
    name = "link-creation-agent"

    aliases = ["lca"]

    short_help = "Display logs for the Link Creation Agent service"

    help = """
'das-cli logs link-creation-agent' displays the logs of the Link Creation Agent service.
This command retrieves the logs generated by the Link Creation Agent, which may include information about link creation processes, agent events, and errors.

.SH EXAMPLES

Display logs of the Link Creation Agent service.

$ das-cli logs link-creation-agent
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        link_creation_container_manager: LinkCreationAgentContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._link_creation_container_manager = link_creation_container_manager

    @ensure_container_running(
        ["_link_creation_container_manager"],
        exception_text="Link creation agent is not running. Please start it with 'das-cli link-creation-agent start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._link_creation_container_manager.logs()


class LogsInferenceAgent(Command):
    name = "inference-agent"

    aliases = ["inference"]

    short_help = "Display logs for the Inference Agent service."

    help = """
'das-cli logs inference-agent' displays the logs of the Inference Agent service.
This command retrieves the logs generated by the Inference Agent, which may include information about inference processes, agent events, and errors.

.SH EXAMPLES

Display logs of the Inference Agent service.

$ das-cli logs inference-agent
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        inference_agent_container_manager: InferenceAgentContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._inference_agent_container_manager = inference_agent_container_manager

    @ensure_container_running(
        ["_inference_agent_container_manager"],
        exception_text="Inference agent is not running. Please start it with 'das-cli inference-agent start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._inference_agent_container_manager.logs()


class LogsEvolutionAgent(Command):
    name = "evolution-agent"

    aliases = ["eb"]

    short_help = "Display logs for the Evolution Agent service"

    help = """
'das-cli logs evolution-agent' displays the logs of the Evolution Agent service.
This command retrieves the logs generated by the Evolution Agent, which may include information about evolution processes, agent events, and errors.

.SH EXAMPLES

Display logs of the Evolution Agent service.

$ das-cli logs evolution-agent
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        evolution_agent_container_manager: EvolutionAgentContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._evolution_agent_container_manager = evolution_agent_container_manager

    @ensure_container_running(
        ["_evolution_agent_container_manager"],
        exception_text="Evolution Agent is not running. Please start it with 'das-cli evolution-agent start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._evolution_agent_container_manager.logs()


class LogsContextBroker(Command):
    name = "context-broker"

    aliases = ["con", "context"]

    short_help = "Display logs for the Context Broker service"

    help = """
'das-cli logs context-broker' displays the logs of the Context Broker service.
This command retrieves the logs generated by the Context Broker, which may include information about evolution processes, agent events, and errors.

.SH EXAMPLES

Display logs of the Context Broker service.

$ das-cli logs context-broker
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        context_broker_container_manager: ContextBrokerContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._context_broker_container_manager = context_broker_container_manager

    @ensure_container_running(
        ["_context_broker_container_manager"],
        exception_text="Context Broker is not running. Please start it with 'das-cli context-broker start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._context_broker_container_manager.logs()


class LogsContextBroker(Command):
    name = "context-broker"

    aliases = ["con", "context"]

    short_help = "Display logs for the Context Broker service"

    help = """
'das-cli logs context-broker' displays the logs of the Context Broker service.
This command retrieves the logs generated by the Context Broker, which may include information about evolution processes, agent events, and errors.

.SH EXAMPLES

Display logs of the Context Broker service.

$ das-cli logs context-broker
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        context_broker_container_manager: ContextBrokerContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._context_broker_container_manager = context_broker_container_manager

    @ensure_container_running(
        ["_context_broker_container_manager"],
        exception_text="Context Broker is not running. Please start it with 'das-cli context-broker start' before viewing logs.",
        verbose=False,
    )
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._context_broker_container_manager.logs()


class LogsCli(CommandGroup):
    name = "logs"

    short_help = "Manage container logs."

    help = """
NAME

    logs - Manage container logs

SYNOPSIS

    das-cli logs <service>

DESCRIPTION

    Displays logs for services managed by the DAS CLI.
    These logs provide insight into operations, errors, and runtime behavior.

COMMANDS

    das-cli logs das                        Logs from the DAS core
    das-cli logs mongodb                    Logs from the MongoDB database
    das-cli logs redis                      Logs from the Redis cache
    das-cli logs attention-broker           Logs from the Attention Broker service
    das-cli logs query-agent                Logs from the Query Agent service
    das-cli logs link-creation-agent        Logs from the Link Creation Agent service
    das-cli logs inference-agent            Logs from the Inference Agent service
    das-cli logs evolution-agent            Logs from the Evolution Agent service
    das-cli logs context-broker             Logs from the Context Broker service

EXAMPLES

    Display logs from the DAS core:

        das-cli logs das

    Display logs from MongoDB:

        das-cli logs mongodb

    Display logs from Redis:

        das-cli logs redis

    Display logs from the Attention Broker service:

        das-cli logs attention-broker

    Display logs from the Query Agent service:

        das-cli logs query-agent

    Display logs from the Link Creation Agent service:

        das-cli logs link-creation-agent

    Display logs from the Inference Agent service:

        das-cli logs inference-agent

    Display logs from the Evolution Agent service:

        das-cli logs evolution-agent

    Display logs from the Context Broker service:

        das-cli logs context-broker

"""

    @inject
    def __init__(
        self,
        logs_das: LogsDas,
        logs_mongodb: LogsMongoDb,
        logs_redis: LogsRedis,
        logs_attention_broker: LogsAttentionBroker,
        logs_query_agent: LogsQueryAgent,
        logs_link_creation_agent: LogsLinkCreationAgent,
        logs_inference_agent: LogsInferenceAgent,
        logs_evolution_agent: LogsEvolutionAgent,
        logs_context_broker: LogsContextBroker,
    ) -> None:
        super().__init__()
        self.add_commands(
            [
                logs_das,
                logs_mongodb,
                logs_redis,
                logs_attention_broker,
                logs_query_agent,
                logs_link_creation_agent,
                logs_inference_agent,
                logs_evolution_agent,
                logs_context_broker,
            ]
        )
