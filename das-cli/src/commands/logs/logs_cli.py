from time import sleep

from injector import inject

from common.decorators import ensure_container_running
from commands.attention_broker.attention_broker_container_manager import (
    AttentionBrokerManager,
)
from commands.query_agent.query_agent_container_manager import (
    QueryAgentContainerManager,
)
from commands.link_creation_agent.link_creation_agent_container_manager import (
    LinkCreationAgentContainerManager,
)
from commands.inference_agent.inference_agent_container_manager import (
    InferenceAgentContainerManager,
)
from commands.db.mongodb_container_manager import MongodbContainerManager
from commands.db.redis_container_manager import RedisContainerManager
from commands.faas.openfaas_container_manager import OpenFaaSContainerManager
from common import Command, CommandGroup, Settings, StdoutSeverity
from common.docker.exceptions import DockerError
from settings.config import LOG_FILE_NAME


class LogsDas(Command):
    name = "das"

    short_help = "Display logs for das."

    help = """
'das-cli logs das' displays the logs of the DAS service.
This command retrieves the logs generated by the DAS service, which are typically located in
the /tmp/das.log file.

.SH EXAMPLES

Display logs of the DAS service.

$ das-cli logs das
"""

    def __init__(self) -> None:
        super().__init__()

    def run(self):
        try:
            with open(LOG_FILE_NAME, "r") as file:
                while True:
                    line = file.readline()
                    if not line:
                        sleep(0.1)
                        continue
                    self.stdout(line, new_line=False)
        except KeyboardInterrupt:
            self.stdout("Interrupted. Exiting...", severity=StdoutSeverity.ERROR)
        except FileNotFoundError:
            self.stdout("No logs to show up here", severity=StdoutSeverity.WARNING)


class LogsFaaS(Command):
    name = "faas"

    short_help = "Display logs for OpenFaaS services."

    help = """
'das-cli logs faas' displays the logs of the OpenFaaS service.
This command retrieves the logs generated by the OpenFaaS service, which may include information about function executions, deployments, and errors.

.SH EXAMPLES

Display logs of the OpenFaaS service.

$ das-cli logs faas
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        openfaas_container_manager: OpenFaaSContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._openfaas_container_manager = openfaas_container_manager

    @ensure_container_running(["_openfaas_container_manager"])
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._openfaas_container_manager.logs()


class LogsMongoDb(Command):
    name = "mongodb"

    short_help = "Display logs of the MongoDB service."

    help = """
'das-cli logs mongodb' displays the logs of the MongoDB service.
This command retrieves the logs generated by the MongoDB service, which may include information about database connections, queries, and errors.

.SH EXAMPLES

Display logs of the MongoDB service.

$ das-cli logs mongodb
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        mongodb_container_manager: MongodbContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._mongodb_container_manager = mongodb_container_manager

    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._mongodb_container_manager.logs()


class LogsRedis(Command):
    name = "redis"

    short_help = "Display logs for Redis."

    help = """
'das-cli logs redis' command displays the logs of the Redis service.
This command retrieves the logs generated by the Redis service, which may include information about connections, commands, and errors.

EXAMPLES

Display logs of the Redis service.

$ das-cli logs redis
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        redis_container_manager: RedisContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._redis_container_manager = redis_container_manager

    @ensure_container_running(["_redis_container_manager"])
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._redis_container_manager.logs()


class LogsAttentionBroker(Command):
    name = "attention-broker"

    short_help = "Display logs for the Attention Broker service"

    help = """
'das-cli logs attention-broker' displays the logs of the Attention Broker service.
This command retrieves the logs generated by the Attention Broker, which may include information about message routing, broker events, and errors.

.SH EXAMPLES

Display logs of the Attention Broker service.

$ das-cli logs attention-broker
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        attention_broker_manager: AttentionBrokerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._attention_broker_manager = attention_broker_manager

    @ensure_container_running(["_attention_broker_manager"])
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._attention_broker_manager.logs()


class LogsQueryAgent(Command):
    name = "query-agent"

    short_help = "Display logs for the Query Agent service"

    help = """
'das-cli logs query-agent' displays the logs of the Query Agent service.
This command retrieves the logs generated by the Query Agent, which may include information about query processing, agent events, and errors.

.SH EXAMPLES

Display logs of the Query Agent service.

$ das-cli logs query-agent
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        query_agent_container_manager: QueryAgentContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._query_agent_container_manager = query_agent_container_manager

    @ensure_container_running(["_query_agent_container_manager"])
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._query_agent_container_manager.logs()


class LogsLinkCreationAgent(Command):
    name = "link-creation-agent"

    short_help = "Display logs for the Link Creation Agent service"

    help = """
'das-cli logs link-creation-agent' displays the logs of the Link Creation Agent service.
This command retrieves the logs generated by the Link Creation Agent, which may include information about link creation processes, agent events, and errors.

.SH EXAMPLES

Display logs of the Link Creation Agent service.

$ das-cli logs link-creation-agent
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        link_creation_container_manager: LinkCreationAgentContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._link_creation_container_manager = link_creation_container_manager

    @ensure_container_running(["_link_creation_container_manager"])
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._link_creation_container_manager.logs()


class LogsInferenceAgent(Command):
    name = "inference-agent"

    short_help = "Display logs for the Inference Agent service."

    help = """
'das-cli logs inference-agent' displays the logs of the Inference Agent service.
This command retrieves the logs generated by the Inference Agent, which may include information about inference processes, agent events, and errors.

.SH EXAMPLES

Display logs of the Inference Agent service.

$ das-cli logs inference-agent
"""

    @inject
    def __init__(
        self,
        settings: Settings,
        inference_agent_container_manager: InferenceAgentContainerManager,
    ) -> None:
        super().__init__()
        self._settings = settings
        self._inference_agent_container_manager = inference_agent_container_manager

    @ensure_container_running(["_inference_agent_container_manager"])
    def run(self):
        self._settings.raise_on_missing_file()
        self._settings.raise_on_schema_mismatch()

        self._inference_agent_container_manager.logs()


class LogsCli(CommandGroup):
    name = "logs"

    short_help = "Manage container logs."

    help = """
'das-cli logs' allows you to display logs of various DAS CLI services.
This command retrieves logs generated by specific services and provides insights into their operations, including information about connections, queries, executions, and errors.
"""

    @inject
    def __init__(
        self,
        logs_das: LogsDas,
        logs_faas: LogsFaaS,
        logs_mongodb: LogsMongoDb,
        logs_redis: LogsRedis,
        logs_attention_broker: LogsAttentionBroker,
        logs_query_agent: LogsQueryAgent,
        logs_link_creation_agent: LogsLinkCreationAgent,
        logs_inference_agent: LogsInferenceAgent,
    ) -> None:
        super().__init__()
        self.add_commands(
            [
                logs_das.command,
                logs_faas.command,
                logs_mongodb.command,
                logs_redis.command,
                logs_attention_broker.command,
                logs_query_agent.command,
                logs_link_creation_agent.command,
                logs_inference_agent.command,
            ]
        )
