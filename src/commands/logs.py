import click
from sys import exit
from time import sleep
from services import RedisContainerService, MongoContainerService
from services import OpenFaaSContainerService
from exceptions import DockerDaemonException, DockerException
from config import USER_DAS_PATH


@click.group()
@click.pass_context
def logs(ctx):
    """
    Manage container logs.

    'das-cli logs' allows you to display logs of various DAS CLI services.
    This command retrieves logs generated by specific services and provides insights into their operations, including information about connections, queries, executions, and errors.
    """

    global config

    config = ctx.obj["config"]

    try:
        if not config.exists():
            raise FileNotFoundError()

    except FileNotFoundError:
        click.secho(
            f"Configuration file not found in {USER_DAS_PATH}. You can run the command `config set` to create a configuration file.",
            fg="red",
        )
        exit(1)


@logs.command()
def das():
    """
    Display logs for das.

    'das-cli logs das' displays the logs of the DAS service.
    This command retrieves the logs generated by the DAS service, which are typically located in
    the /tmp/das.log file.

    .SH EXAMPLES

    Display logs of the DAS service.

    $ das-cli logs das
    """
    try:
        with open("/tmp/das.log", "r") as file:
            while True:
                line = file.readline()
                if not line:
                    sleep(0.1)
                    continue
                click.echo(line, nl=False)
    except KeyboardInterrupt:
        click.secho("Interrupted. Exiting...", fg="red")
    except FileNotFoundError:
        click.secho("No logs to show up here", fg="yellow")


@logs.command()
def faas():
    """
    Display logs for OpenFaaS services.

    'das-cli logs faas' displays the logs of the OpenFaaS service.
    This command retrieves the logs generated by the OpenFaaS service, which may include information about function executions, deployments, and errors.

    .SH EXAMPLES

    Display logs of the OpenFaaS service.

    $ das-cli logs faas
    """

    openfaas_container_name = config.get("openfaas.container_name")
    mongodb_container_name = config.get("mongodb.container_name")
    redis_container_name = config.get("redis.container_name")

    try:
        openfaas_service = OpenFaaSContainerService(
            openfaas_container_name,
            redis_container_name,
            mongodb_container_name,
        )

        openfaas_service.logs()
    except DockerException as e:
        click.secho(str(e), fg="red")
        click.secho("You need to run the server with command 'db start'", fg="red")
        exit(1)
    except DockerDaemonException as e:
        click.secho(f"{str(e)}\n", fg="red")
        exit(1)


@logs.command()
def mongodb():
    """
    Display logs of the MongoDB service.

    'das-cli logs mongodb' displays the logs of the MongoDB service.
    This command retrieves the logs generated by the MongoDB service, which may include information about database connections, queries, and errors.

    .SH EXAMPLES

    Display logs of the MongoDB service.

    $ das-cli logs mongodb
    """

    mongodb_container_name = config.get("mongodb.container_name")

    try:
        mongodb_service = MongoContainerService(mongodb_container_name)

        mongodb_service.logs()
    except DockerException as e:
        click.secho(str(e), fg="red")
        click.secho("You need to run the server with command 'db start'", fg="red")
        exit(1)
    except DockerDaemonException as e:
        click.secho(f"{str(e)}\n", fg="red")
        exit(1)


@logs.command()
def redis():
    """
    Display logs for Redis.

    'das-cli logs redis' command displays the logs of the Redis service.
    This command retrieves the logs generated by the Redis service, which may include information about connections, commands, and errors.

    EXAMPLES

    Display logs of the Redis service.

    $ das-cli logs redis
    """
    redis_container_name = config.get("redis.container_name")

    try:
        redis_service = RedisContainerService(redis_container_name)

        redis_service.logs()
    except DockerException as e:
        click.secho(str(e), fg="red")
        click.secho("You need to run the server with command 'db start'", fg="red")
        exit(1)
    except DockerDaemonException as e:
        click.secho(f"{str(e)}\n", fg="red")
        exit(1)
