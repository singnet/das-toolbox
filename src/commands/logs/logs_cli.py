from injector import inject
from common import Command, CommandGroup, StdoutSeverity, Settings
from common.docker.exceptions import DockerError
from commands.faas.openfaas_container_manager import OpenFaaSContainerManager
from commands.db.mongodb_container_manager import MongodbContainerManager
from commands.db.redis_container_manager import RedisContainerManager
from time import sleep
from config import LOG_FILE_NAME


class LogsDas(Command):
    name = "das"

    short_help = "Display logs for das."

    help = """
'das-cli logs das' displays the logs of the DAS service.
This command retrieves the logs generated by the DAS service, which are typically located in
the /tmp/das.log file.

.SH EXAMPLES

Display logs of the DAS service.

$ das-cli logs das
"""

    def __init__(self) -> None:
        super().__init__()

    def run(self):
        try:
            with open(LOG_FILE_NAME, "r") as file:
                while True:
                    line = file.readline()
                    if not line:
                        sleep(0.1)
                        continue
                    self.stdout(line, new_line=False)
        except KeyboardInterrupt:
            self.stdout("Interrupted. Exiting...", severity=StdoutSeverity.ERROR)
        except FileNotFoundError:
            self.stdout("No logs to show up here", severity=StdoutSeverity.WARNING)


class LogsFaaS(Command):
    name = "faas"

    short_help = "Display logs for OpenFaaS services."

    help = """
'das-cli logs faas' displays the logs of the OpenFaaS service.
This command retrieves the logs generated by the OpenFaaS service, which may include information about function executions, deployments, and errors.

.SH EXAMPLES

Display logs of the OpenFaaS service.

$ das-cli logs faas
"""

    @inject
    def __init__(self, settings: Settings) -> None:
        super().__init__()
        self._settings = settings

    def run(self):
        self._settings.raise_on_missing_file()

        openfaas_container_name = self._settings.get("openfaas.container_name")

        try:
            openfaas_service = OpenFaaSContainerManager(openfaas_container_name)
            openfaas_service.logs()
        except DockerError as e:
            self.stdout(
                "You need to run the server with command 'faas start'",
                severity=StdoutSeverity.ERROR,
            )
            raise e


class LogsMongoDb(Command):
    name = "mongodb"

    short_help = "Display logs of the MongoDB service."

    help = """
'das-cli logs mongodb' displays the logs of the MongoDB service.
This command retrieves the logs generated by the MongoDB service, which may include information about database connections, queries, and errors.

.SH EXAMPLES

Display logs of the MongoDB service.

$ das-cli logs mongodb
"""

    @inject
    def __init__(self, settings: Settings) -> None:
        super().__init__()
        self._settings = settings

    def run(self):
        self._settings.raise_on_missing_file()

        mongodb_container_name = self._settings.get("mongodb.container_name")

        try:
            mongodb_service = MongodbContainerManager(mongodb_container_name)

            mongodb_service.logs()
        except DockerError:
            raise DockerError("You need to run the server with command 'db start'")


class LogsRedis(Command):
    name = "redis"

    short_help = "Display logs for Redis."

    help = """
'das-cli logs redis' command displays the logs of the Redis service.
This command retrieves the logs generated by the Redis service, which may include information about connections, commands, and errors.

EXAMPLES

Display logs of the Redis service.

$ das-cli logs redis
"""

    @inject
    def __init__(self, settings: Settings) -> None:
        super().__init__()
        self._settings = settings

    def run(self):
        self._settings.raise_on_missing_file()

        redis_container_name = self._settings.get("redis.container_name")

        try:
            redis_service = RedisContainerManager(redis_container_name)

            redis_service.logs()
        except DockerError:
            raise DockerError("You need to run the server with command 'db start'")


class LogsCli(CommandGroup):
    name = "logs"

    short_help = "Manage container logs."

    help = """
'das-cli logs' allows you to display logs of various DAS CLI services.
This command retrieves logs generated by specific services and provides insights into their operations, including information about connections, queries, executions, and errors.
"""

    @inject
    def __init__(
        self,
        logs_das: LogsDas,
        logs_faas: LogsFaaS,
        logs_mongodb: LogsMongoDb,
        logs_redis: LogsRedis,
    ) -> None:
        super().__init__()
        self.add_commands(
            [
                logs_das.command,
                logs_faas.command,
                logs_mongodb.command,
                logs_redis.command,
            ]
        )
